version: '3.5'
services:

  postgres1:
    image: postgres
    container_name: postgres_moex2
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres:/data/postgres
    ports:
      - 5440:5432
    networks:
      - my_network

  moex2:
    image: leovante/moex2:latest
    container_name: moex2
    depends_on:
      - postgres1
#    build:
#      context: ./
#      dockerfile: ./dockerfile
#      args:
#        JAR_FILE: target/moex2-1.0-SNAPSHOT.jar
    environment:
      APP_PORT: 8080
      DB_HOST: postgres1
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      JVM_OPTS: >
        -XX:+CrashOnOutOfMemoryError
    restart: always
    ports:
      - 24300:8080
    networks:
      - my_network
    command: [ "java","-jar","-Dliquibase.hub.mode=off","/usr/local/service/moex2-1.0-SNAPSHOT.jar" ]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  minio-image:
    container_name: minio-image
    build:
      context: .
      dockerfile: ./dockerfile_minio/Dockerfile
    restart: always
    working_dir: "/minio-image/storage"
    ports:
        - 9000:9000
    environment:
        MINIO_ACCESS_KEY: minio-image
        MINIO_SECRET_KEY: minio-image-pass
    command: server /minio-image/storage

  pgadmin:
    container_name: pgadmin
    build:
      context: .
      dockerfile: ./dockerfile_pgadmin/Dockerfile
    environment:
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "False"
#      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - 5050:80
    networks:
      - my_network
    depends_on:
      - postgres1

  mlflow-image:
      container_name: "mlflow-image"
      build:
          context: .
          dockerfile: ./dockerfile_mlflowserver/Dockerfile
      working_dir: "/mlflow-image"
      environment:
          MLFLOW_S3_ENDPOINT_URL: http://minio-image:9000
          AWS_ACCESS_KEY_ID: minio-image
          AWS_SECRET_ACCESS_KEY: minio-image-pass
      ports:
          - 5500:5500
      command: mlflow server --host 0.0.0.0 --port 5500 --backend-store-uri /mlflow-image/mlruns

  jupyter-image:
    container_name: "jupyter-image"
    build:
      context: .
      dockerfile: ./dockerfile_jupyter_notebook/Dockerfile
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio-image:9000
      AWS_ACCESS_KEY_ID: minio-image
      AWS_SECRET_ACCESS_KEY: minio-image-pass
      MLFLOW_TRACKING_URI: http://mlflow-image:5500
    networks:
      - my_network
    ports:
      - 8888:8888

  redis:
    image: redis
    restart: always
    volumes:
      - redis:/data

  superset:
    container_name: superset
    build:
      context: .
      dockerfile: ./dockerfile_superset/Dockerfile
    restart: always
    environment:
      MAPBOX_API_KEY: ${MAPBOX_API_KEY}
      SUPERSET_HOME: /etc/superset
    networks:
      - my_network
    ports:
      - 8088:8088
    depends_on:
      - redis

  postgres_secmaster:
    build:
      context: .
      dockerfile: ./dockerfile_postgres_secmaster/Dockerfile
    restart: always
    container_name: postgres_secmaster
    networks:
      - my_network
    ports:
      - 5432:5432
    environment:
      - SHARED_PASSWORD=password
      - POSTGRES_PASSWORD=posgres349
    volumes:
      - pg_data:/var/lib/postgresql/data

  postgres:
    image: postgres
    container_name: postgres_airflow
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - pg_data_airflow:/var/lib/postgresql/data

  airflow:
    image: airflow
    container_name: airflow
    build:
      context: .
      dockerfile: ./dockerfile_airflow/Dockerfile
    restart: always
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    ports:
      - 8080:8080
    command: webserver

volumes:
  postgres:
  pg_data:
    external: false
    name: pg_data
  pg_data_airflow:
    external: false
    name: pg_data_airflow
  redis:
    external: false
    name: redis

networks:
  my_network:
